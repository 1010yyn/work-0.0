#include<Winsock2.h>
#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<iomanip>
#include<string>
#include<iostream>
#pragma comment(lib,"ws2_32.lib")
#define _CRT_SECURE_NO_WARNINGS
#define DEFAULT_PORT 5070
#define BUFFER_LENGTH 1024
#define Login "Login"
#define Regist "Regist"
#define Set "Set"
#define Null ""
using namespace std;

char buf[BUFFER_LENGTH];
char IP1[BUFFER_LENGTH];//client1
char IP2[BUFFER_LENGTH];//client2
char Port1[6];//client1
char Port2[6];//client2
int port;
int cnt = 0;

const int Amount = 500;//最大注册人数
int amount;//已注册的人数
const string file = "regidit.txt";
ifstream ifile;
ofstream ofile;

WSADATA wsaData;
SOCKET sSocket;
int iLen;
int iSend;
int iRecv;
struct sockaddr_in ser, cli;
struct sockaddr_in chat[10];

class User
{
private:
	string ID;
	string password;
	string IP;
	string Port;
	bool online;

public:
	User()//用户信息初始化
	{
		ID = " ";
		password = "";
		IP = "";
		Port = "";
		online = false;
	}
	void fillin(string ID, string password, string IP, string Port);//注册信息,在客户端填写
	void rtmsg();//信息写入文件
	bool rdmsg();//从文件读取信息
	bool cmpID(string ID);//对比ID
	bool cmppswd(string paswd);//对比密码
	bool cmpIP(string IP);//对比IP
	bool cmpPt(string Port);//对比端口
	int GetPort();//返回端口int型
	void Online() { online = true; }//上线
	void offline() { online = false; }//下线
	string getIP() { return IP; }//返回IP地址
	string getPort() { return Port; }//返回端口地址
	string getID() { return ID; }//返回ID
	bool isonline() { return online; }//返回是否在线
};

void User::fillin(string ID, string password, string IP, string Port)
{
	User::ID = ID;
	User::password = password;
	User::IP = IP;
	User::Port = Port;
}

void User::rtmsg()
{

	ofile << ID << " " << password << " " << IP << " " << Port << "\n";
}

bool User::rdmsg()
{
	getline(ifile, ID, ' ');
	if (ID == "end" || ID == "" || ID == "\n")
	{
		ID = "";
		return true;//该信息是末尾的标识符
	}
	getline(ifile, password, ' ');
	getline(ifile, IP, ' ');
	getline(ifile, Port, '\n');
	return false;
}

bool User::cmpID(string ID)
{
	int i;
	for (i = 0; ID[i] != '\0'; i++)
		if (ID[i] != User::ID[i])
			return false;
	if (User::ID[i] == '\0')
		return true;
	else return false;
}

bool User::cmppswd(string password)
{
	int i;
	for (i = 0; password[i] != '\0'; i++)
		if (password[i] != User::password[i])
			return false;
	if (User::password[i] == '\0')
		return true;
	else return false;
}

bool User::cmpIP(string IP)
{
	int i;
	for (i = 0; IP[i] != '\0'; i++)
		if (IP[i] != User::IP[i])
			return false;
	if (User::IP[i] == '\0')
		return true;
	else return false;
}

bool User::cmpPt(string Port)
{
	int i;
	for (i = 0; Port[i] != '\0'; i++)
		if (Port[i] != User::Port[i])
			return false;
	if (User::Port[i] == '\0')
		return true;
	else return false;
}

int User::GetPort()
{
	int port;
	port = 0;
	port += User::Port[3] - 48;
	port += (User::Port[2] - 48) * 10;
	port += (User::Port[1] - 48) * 100;
	port += (User::Port[0] - 48) * 1000;
	return port;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////

void rdmsg(User user[100])
{
	int i = 0;
	bool flag = true;
	ifile.open(file);
	for (i = 0; i < Amount; i++)
		if (user[i].rdmsg())//读到结尾
		{
			amount = i;//总人数
			break;
		}
	ifile.close();
}

void rtmsg(User user[100])
{
	int i;
	ofile.open(file);
	for (i = 0; i < amount; i++)
		user[i].rtmsg();
	ofile << "end";//写入"end"表示该文件结尾
	ofile.close();
}

bool regist(string ID, string password, string IP, string Port, User user[100])
{
	int i;
	int flag = false;//查重
	for (i = 0; i < amount; i++)
	{
		if (user[i].cmpID(ID))
		{
			flag = true;//重复
			break;
		}
	}
	if (flag)//重复
		return false;//注册失败
	else
	{
		user[amount].fillin(ID, password, IP, Port);//注册
		amount++;//总数++
		return true;//注册成功
	}
}

int login(string ID, string password, User user[100], string IP, string Port)
{
	int i;
	bool flag = false;
	for (i = 0; i < amount; i++)
	{
		if (user[i].cmpID(ID))
		{
			flag = true;
			if (user[i].cmppswd(password))
			{
				if (user[i].isonline())//该用户已上线
					return 3;//重复登陆
				user[i].Online();//上线
				user[i].fillin(ID, password, IP, Port);//修改新的IP和Port
				return 0;//登陆成功
			}
			else return 2;//密码错误
		}
	}
	if (!flag) return 1;//用户名不存在
}

//////////////////////////////////////////////////////////////////////////////////////////////////

bool cmpRe()
{
	for (int i = 0; i <= 5; i++)
	{
		if (IP1[i] != Regist[i])
			return false;
	}
	return true;
}

bool cmpLo()
{
	for (int i = 0; i <= 4; i++)
	{
		if (IP1[i] != Login[i])
			return false;
	}
	return true;
}

bool cmpSe() {
	for (int i = 0; i <= 2; i++)
	{
		if (IP1[i] != Set[i])
			return false;
	}
	return true;
}

void prttm()
{
	time_t t;
	struct tm * lt;
	time(&t);//获取Unix时间戳。
	lt = localtime(&t);//转为时间结构。
	printf("Time:%d/%d/%d %d:%d:%d\n", lt->tm_year + 1900, (lt->tm_mon) + 1, lt->tm_mday, lt->tm_hour, lt->tm_min, lt->tm_sec);//输出结果
}

void prtbuf()//打印信息
{
	int i = 0;
	while (buf[i] != '\0')
	{
		printf("%c", buf[i]);
		i++;
	}
}

void rdIP()//读取Port2
{
	//端口
	port = 0;
	port += Port2[3] - 48;
	port += (Port2[2] - 48) * 10;
	port += (Port2[1] - 48) * 100;
	port += (Port2[0] - 48) * 1000;
}

int getIPandPt(User user[100], char ID[BUFFER_LENGTH], char IP[BUFFER_LENGTH], char Port[BUFFER_LENGTH])
{
	string ip, port;
	bool flag = false;//是否存在该用户
	for (int i = 0; i < amount; i++)
	{
		if (user[i].cmpID(ID))
		{
			flag = true;
			if (!user[i].isonline())//不在线
				return 1;
			ip = user[i].getIP();
			port = user[i].getPort();
			break;
		}
	}
	if (flag)
	{
		int i;
		for (i = 0; ip[i] != '\0'; i++)
			IP[i] = ip[i];
		IP[i] = '\0';
		for (i = 0; port[i] != '\0'; i++)
			Port[i] = port[i];
		Port[i] = '\0';
		return 0;//ok
	}
	return 2;//用户不存在
}

void getID(User user[100], char IP[BUFFER_LENGTH], char ID[BUFFER_LENGTH], char Port[BUFFER_LENGTH])
{
	string id;
	for (int i = 0; i < amount; i++)
	{
		if (user[i].cmpIP(IP))
		{
			if (user[i].cmpPt(Port))
			{
				id = user[i].getID();
				break;
			}
		}
	}
	int i;
	for (i = 0; id[i] != '\0'; i++)
		ID[i] = id[i];
	ID[i] = '\0';
}

void sendtoall(User user[100], char ID[BUFFER_LENGTH])
{
	int i;
	for (i = 0; i < amount; i++)
	{
		if (!user[i].cmpID(ID))
		{
			closesocket(sSocket);//关闭套接口

		}
	}
}

void offline(User user[100], char ID[BUFFER_LENGTH])
{
	for (int i = 0; i < amount; i++)
	{
		if (user[i].cmpID(ID))
		{
			user[i].offline();
		}
	}
}

void main()
{
	int iPort = DEFAULT_PORT;
	int j;

	User user[100];//保存信息
	int flag = 0;//1 注册，2 登陆， 3 聊天 ，0 未知
	int ans;//注册/登录状态


	printf("--------------\n");
	printf("Server waiting\n");
	printf("--------------\n");
	ofile.open(file, ios::app);//创建一个file文件
	ofile.close();//关闭文件
	rdmsg(user);//读取所有的信息
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Faild to load Winsock.\n");
		return;
	}
	while (1)
	{
		sSocket = socket(AF_INET, SOCK_DGRAM, 0);
		if (sSocket == INVALID_SOCKET)
		{
			printf("socket() Faild:%d\n", WSAGetLastError());
			return;
		}
		//服务器自身信息
		ser.sin_family = AF_INET;
		ser.sin_port = htons(iPort);
		ser.sin_addr.s_addr = htonl(INADDR_ANY);
		if (bind(sSocket, (LPSOCKADDR)&ser, sizeof(ser)) == SOCKET_ERROR)
		{
			printf("bind() Failed:%d\n", WSAGetLastError());
			return;
		}
		iLen = sizeof(cli);
		memset(IP1, 0, sizeof(IP1));
		memset(IP2, 0, sizeof(IP2));
		memset(Port1, 0, sizeof(Port1));
		memset(Port2, 0, sizeof(Port2));
		memset(buf, 0, sizeof(buf));
		iRecv = recvfrom(sSocket, IP1, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//1
		printf("-----------------------\n");
		if (cmpRe())//注册
		{
			flag = 1;
			iRecv = recvfrom(sSocket, IP2, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//ID
			iRecv = recvfrom(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, &iLen);//password
			iRecv = recvfrom(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, &iLen);//Port
			iRecv = recvfrom(sSocket, buf, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//IP
			printf("接收到注册申请…\n来自：\n");
			printf("IP:[%s],port:[%d]\n", inet_ntoa(cli.sin_addr), ntohs(cli.sin_port));
			prttm();
			ans = regist(IP2, Port1, buf, Port2, user);
			if (ans == true)//成功
			{
				IP2[0] = '0';
				rtmsg(user);
				rdmsg(user);
				ans = 0;
				printf("注册成功！\n");
			}
			else if (ans == false)//用户名重复
			{
				IP2[0] = '1';
				ans = 1;
				printf("用户名重复\n注册失败\n");
			}
		}
		else if (cmpLo())//登陆
		{
			flag = 2;
			iRecv = recvfrom(sSocket, IP2, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//ID
			iRecv = recvfrom(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, &iLen);//password
			iRecv = recvfrom(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, &iLen);//Port
			iRecv = recvfrom(sSocket, buf, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//IP
			printf("接收到登录申请…\n来自：\n");
			printf("IP:[%s],port:[%d]\n", inet_ntoa(cli.sin_addr), ntohs(cli.sin_port));
			prttm();
			ans = login(IP2, Port1, user, buf, Port2);
			if (ans == 0)//成功
			{
				IP2[0] = '0';
				cnt++;//在线人数++;
				rtmsg(user);
				rdmsg(user);
				printf("上线！\n");
			}
			else if (ans == 1)//用户名不存在
			{
				IP2[0] = '1';
				printf("用户名不存在！\n");
			}
			else if (ans == 2)//密码错误
			{
				IP2[0] = '2';
				printf("密码错误！\n");
			}
			else if (ans == 3)
			{
				printf("重复登录！\n该用户已上线！\n");
				IP2[0] = '3';
			}
		}
		else if (cmpSe())//群聊
		{
			flag = 4;
			iRecv = recvfrom(sSocket, IP2, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//c1IP
			iRecv = recvfrom(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, &iLen);//c1群聊server端口
			iRecv = recvfrom(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, &iLen);//NULL
			iRecv = recvfrom(sSocket, buf, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//文字
			getID(user, IP2, IP2, Port1);//根据c1的IP和端口找出c1的ID
			printf("接收到通信申请…\n来自：\n");
			printf("IP:[%s],port:[%d]\n", inet_ntoa(cli.sin_addr), ntohs(cli.sin_port));
			prttm();
			if (buf[0] == 'Q'&&buf[1] == '\0')
			{
				printf("下线\n");
				cnt--;
				offline(user, IP1);
			}
			prtbuf();
			cout << endl;
		}
		else
		{
			flag = 3;
			//c1IP
			iRecv = recvfrom(sSocket, IP2, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//c2的ID改成IP
			iRecv = recvfrom(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, &iLen);//c1端口
			iRecv = recvfrom(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, &iLen);//c2端口
			iRecv = recvfrom(sSocket, buf, BUFFER_LENGTH, 0, (SOCKADDR*)&cli, &iLen);//文字
			printf("接收到通信申请…\n来自：\n");
			printf("IP:[%s],port:[%d]\n", inet_ntoa(cli.sin_addr), ntohs(cli.sin_port));
			prttm();
			ans = getIPandPt(user, IP2, IP2, Port2);//根据c2的ID找出c2的IP和端口地址
			if (ans == 0)
			{
				printf("该用户在线！\n");
				getID(user, IP1, IP1, Port1);//根据c1的IP和端口找出c1的ID
			}
			else if (ans == 1)
			{
				printf("对方不在线！\n");
				IP2[0] = '1';
			}
			else if (ans == 2)
			{
				printf("用户不存在！\n");
				IP2[0] = '2';
			}
			if (buf[0] == 'Q'&&buf[1] == '\0')
			{
				printf("下线\n");
				cnt--;
				offline(user, IP1);
			}
			prtbuf();
			cout << endl;
		}
		printf("在线人数:%d\n", cnt);
		printf("-----------------------\n");
		if (iRecv == SOCKET_ERROR)
		{
			printf("recvfrom() Failed:%d\n.", WSAGetLastError());
			break;
		}
		else if (iRecv == 0)
			break;
		closesocket(sSocket);//关闭套接口
		rdIP();//Port读出

			   //建立套接口
		sSocket = socket(AF_INET, SOCK_DGRAM, 0);
		if (flag == 1 || flag == 2 || (flag == 3 && ans != 0))
		{
			//不修改cli信息，原路返回
			cli.sin_family = AF_INET;
			cli.sin_port = htons(port);//修改端口
			cli.sin_addr.s_addr = inet_addr(buf);//修改IP
			iSend = sendto(sSocket, IP2, sizeof(IP2), 0, (SOCKADDR*)&cli, sizeof(cli));//反馈信息
																					   //空白无效信息
			iSend = sendto(sSocket, Null, sizeof(Null), 0, (SOCKADDR*)&cli, sizeof(cli));
			iSend = sendto(sSocket, Null, sizeof(Null), 0, (SOCKADDR*)&cli, sizeof(cli));
			iSend = sendto(sSocket, Null, sizeof(Null), 0, (SOCKADDR*)&cli, sizeof(cli));
			iSend = sendto(sSocket, Null, sizeof(Null), 0, (SOCKADDR*)&cli, sizeof(cli));
		}
		else if (flag == 3 && ans == 0)
		{
			//修改端口和IP（client2  正常通信
			cli.sin_family = AF_INET;
			cli.sin_port = htons(port);//修改端口
			cli.sin_addr.s_addr = inet_addr(IP2);//修改IP
												 //给转发客户发送信息
			iSend = sendto(sSocket, IP2, sizeof(IP2), 0, (SOCKADDR*)&cli, sizeof(cli));//c2IP
			iSend = sendto(sSocket, IP1, sizeof(IP1), 0, (SOCKADDR*)&cli, sizeof(cli));//c1ID
			iSend = sendto(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, sizeof(cli));//c2
			iSend = sendto(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, sizeof(cli));//c1
			iSend = sendto(sSocket, buf, sizeof(buf), 0, (SOCKADDR*)&cli, sizeof(cli));
		}
		else if (flag == 4)
		{
			string Ip, PORT;
			for (int i = 0; i < amount; i++)
			{
				if (!user[i].cmpID(IP2))
				{
					cli.sin_family = AF_INET;
					Ip = user[i].getIP();//获取IP
					for (j = 0; Ip[j] != '\0'; j++)
						IP1[j] = Ip[j];
					IP1[j] = '\0';
					PORT = user[i].getPort();//获取端口地址
					for (j = 0; PORT[j] != '\0'; j++)
						Port2[j] = PORT[j];
					Port2[j] = '\0';
					cli.sin_port = htons(user[i].GetPort() + 20);//修改端口
					cli.sin_addr.s_addr = inet_addr(IP1);//修改IP
					iSend = sendto(sSocket, "S", sizeof("S"), 0, (SOCKADDR*)&cli, sizeof(cli));//群聊标识
					iSend = sendto(sSocket, IP2, sizeof(IP2), 0, (SOCKADDR*)&cli, sizeof(cli));//c1ID
					iSend = sendto(sSocket, Port2, sizeof(Port2), 0, (SOCKADDR*)&cli, sizeof(cli));//c2
					iSend = sendto(sSocket, Port1, sizeof(Port1), 0, (SOCKADDR*)&cli, sizeof(cli));//c1
					iSend = sendto(sSocket, buf, sizeof(buf), 0, (SOCKADDR*)&cli, sizeof(cli));
					closesocket(sSocket);
					sSocket = socket(AF_INET, SOCK_DGRAM, 0);
				}
			}
		}
		if (iSend == SOCKET_ERROR&&cnt != 0 && cnt != 1)
		{
			printf("sendto() Failed:%d\n", WSAGetLastError());
			printf("-----------------------\n");
			break;
		}
		else if (iSend == 0)
			break;
		else
		{
			printf("sendto() Succeeded.\n");
			prttm();
			printf("IP:[%s],port:[%d]\n", inet_ntoa(cli.sin_addr), ntohs(cli.sin_port));
			printf("-----------------------\n\n");
		}
		closesocket(sSocket);
	}
	WSACleanup();
	rtmsg(user);//写入所有的信息
}
